\name{synRestGET}
\alias{synRestGET}
\alias{synRestPOST}
\alias{synRestPUT}
\alias{synRestDELETE}
\title{
Synapse REST Functions
}
\description{
Functions providing a generic interface to the Web Services
}
\usage{
synRestGET(uri, endpoint=synapseRepoServiceEndpoint())
synRestDELETE(uri, endpoint=synapseRepoServiceEndpoint())
synRestPOST(uri, body, endpoint=synapseRepoServiceEndpoint())
synRestPUT(uri, body, endpoint=synapseRepoServiceEndpoint())
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{uri}{
  		uri of the request, e.g. "/entity/syn101", "/userProfile"
}
  \item{body}{
  		body of a PUT or POST request.  May be either an R list/vector or a recognized Synapse object type (i.e. a subtype of SimplePropertyOwner).  
}
  \item{endpoint}{
  		endpoint for the request. Default is the Synapse Respository services.  See also synapseAuthServiceEndpoint(), synapseFileServiceEndpoint().
}
}
\details{
These functions take care of authentication, following redirects, checking if the client is black listed, checking error statuses, performing retries with exponential back off.  As such the functions are not so much 'low level' as they are generic: They allow the user to access the Synapse web services using the API documents (http://rest.synapse.org) to issue requests to new services in advance of specialized convenience functions in Synapse Client.
}
\value{
an R list generated by calling fromJSON on the server response.
}
\seealso{
\code{\link{synapseRepoServiceEndpoint}}
\code{\link{synapseFileServiceEndpoint}}
\code{\link{synapseAuthServiceEndpoint}}
\code{\link{synapsePortalEndpoint}}
}


